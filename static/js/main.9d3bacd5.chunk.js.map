{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["colors","keys","description","audio","Drum","props","onPress","bind","onClick","document","addEventListener","this","e","indexOf","code","substr","getElementById","play","innerHTML","id","presskey","className","style","console","log","length","Math","floor","random","src","React","Component","Display","App","map","item","index","key","backColor","backColor2","$","css","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2PAIMA,EAAO,CAAC,cAAc,YAAa,SAAS,aAAa,cAAc,uBAAwB,aAAa,WAAY,QAC5H,cAAe,aAAc,YAAY,YAAa,YAAa,gBAAiB,YAAa,aACjG,YAAY,UAAW,OAAQ,eAAgB,SAAU,OAAQ,QAAS,QAAS,YAAa,YAChG,YAAa,YAAa,aAAc,gBAAiB,QAAS,YAAa,WAC/E,SAAU,WAAY,cAAe,QAAS,eAAgB,SAAU,aAEpEC,EAAO,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAChDC,EAAc,CAClB,YACA,eACA,mBACA,cACA,eACA,OACA,MACA,QACA,WAEIC,EAAQ,CACZ,wGACA,oHACA,qJACA,4IACA,4HACA,6HACA,wDACA,6GACA,6DAEIC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBAHE,E,gEAOjBE,SAASC,iBAAiB,WAAYC,KAAKH,W,8BAErCI,IAEgB,IADHX,EAAKY,QAAQD,EAAEE,KAAKC,OAAO,EAAG,MAE/CN,SAASO,eAAeJ,EAAEE,KAAKC,OAAO,EAAG,IAAIE,OAC7CR,SAASO,eAAe,WAAWE,UAAYP,KAAKN,MAAMc,M,8BAGtDP,GACNH,SAASO,eAAeL,KAAKN,MAAMe,UAAUH,OAC7CR,SAASO,eAAe,WAAWE,UAAYP,KAAKN,MAAMc,K,+BAU1D,OACE,6BACE,4BACEE,UAAU,uCACVb,QAASG,KAAKH,QAASW,GAAIR,KAAKN,MAAMc,GAAIG,MAAO,CAAC,oBATtDC,QAAQC,IAAIxB,EAAOyB,OAAQ,UAC3BF,QAAQC,IAAIE,KAAKC,MAAMD,KAAKE,SAAW5B,EAAOyB,SACvCzB,EAAO0B,KAAKC,MAAMD,KAAKE,SAAW5B,EAAOyB,YAS3Cd,KAAKN,MAAMe,SACZ,2BACES,IAAKlB,KAAKN,MAAMF,MAChBgB,GAAIR,KAAKN,MAAMe,SACfC,UAAU,e,GAvCHS,IAAMC,WA8CnBC,EAAU,SAAC3B,GAAD,OAAW,yBAAKc,GAAG,aA6BpBc,EA3BH,WACV,OACE,yBAAKd,GAAG,aAEJ,yBAAKA,GAAG,WACN,yBAAKA,GAAG,WACN,kBAAC,EAAD,MAEA,yBAAKA,GAAG,WACLlB,EAAKiC,KAAI,SAACC,EAAMC,GAAP,OACR,kBAAC,EAAD,CACEC,IAAKpC,EAAKmC,GACVhB,SAAUnB,EAAKmC,GACfjC,MAAOA,EAAMiC,GACbjB,GAAIjB,EAAYkC,aAc5BE,EAAYtC,EAAO0B,KAAKC,MAAMD,KAAKE,SAAS5B,EAAOyB,SACnDc,EAAWvC,EAAO0B,KAAKC,MAAMD,KAAKE,SAAS5B,EAAOyB,SACxDe,IAAE,QAAQC,IAAI,mBAAoB,+BAAiCH,EAAY,KAAOC,EAAY,KAClGC,IAAE,QAAQC,IAAI,oBAAqB,aACnCD,IAAE,QAAQC,IAAI,kBAAmB,aCrGbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxC,SAASO,eAAe,SDyHpB,kBAAmBkC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,a","file":"static/js/main.9d3bacd5.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport $ from 'jquery';\n\nconst colors=['lightsalmon','darsalmon', 'salmon','lightcolar','lightyellow','lightgoldenrodyellow', 'papayawhip','moccasin', 'khaki',\n  'greenyellow', 'lightgreen', 'palegreen','limegreen', 'lightcyan', 'paleturquoise', 'cadetblue', 'powderblue',\n  'steelblue','skyblue', 'plum', 'mediumpurple', 'orchid', 'pink', 'ivory', 'azure', 'gainsboro', 'rosybrown',\n  'goldenrod', 'chocolate', 'sandybrown', 'palevioletred', 'linen', 'gainsboro', 'cornsilk',\n  'sienna', 'seagreen', 'springgreen', 'olive', 'darkseagreen', 'orange', 'peachpuff']\n\nconst keys = [\"Q\", \"W\", \"E\", \"A\", \"S\", \"D\", \"Z\", \"X\", \"C\"];\nconst description = [\n  \"Funky Fun\",\n  \"Mixin' Music\",\n  \"A wee bit lost..\",\n  \"Golden Gold\",\n  \"Chorus Hi-Ya\",\n  \"Hey!\",\n  \"Hat\",\n  \"Bebop\",\n  \"Scratch\"\n];\nconst audio = [\n  \"https://sampleswap.org/samples-ghost/VOCALS%20and%20SPOKEN%20WORD/Children/271[kb]this-is-fun.wav.mp3\",\n  \"https://sampleswap.org/samples-ghost/VOCALS%20and%20SPOKEN%20WORD/Children/221[kb]are_you_done_mixing_yet.aif.mp3\",\n  \"https://sampleswap.org/samples-ghost/VOCALS%20and%20SPOKEN%20WORD/Donald%20Trump%20Construction%20Kit/210[kb]trump-I-Dont-Know-what-I-said.wav.mp3\",\n  \"https://sampleswap.org/samples-ghost/VOCALS%20and%20SPOKEN%20WORD/Donald%20Trump%20Construction%20Kit/174[kb]trump-Im-Really-Rich.wav.mp3\",\n  \"https://sampleswap.org/samples-ghost/VOCALS%20and%20SPOKEN%20WORD/African%20Vocals%20Sung/225[kb]chorus-hi-ya-heh.wav.mp3\",\n  \"https://sampleswap.org/samples-ghost/VOCALS%20and%20SPOKEN%20WORD/African%20Vocals%20Sung/160[kb]male-eehh-yah-man.wav.mp3\",\n  \"https://dl.dropbox.com/s/xctkeh5mpqx5bog/Hat.mp3?dl=0\",\n  \"https://sampleswap.org/samples-ghost/VOCALS%20and%20SPOKEN%20WORD/MALE%20SINGING/200[kb]bebop_lick.aif.mp3\",\n  \"https://dl.dropbox.com/s/wsxn9ktn0ykrxoa/Scratch.mp3?dl=0\"\n];\nclass Drum extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onPress = this.onPress.bind(this);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keypress\", this.onClick);\n  }\n  onPress(e) {\n    let indexClicked = keys.indexOf(e.code.substr(3, 1));\n    if (indexClicked !== -1) {\n      document.getElementById(e.code.substr(3, 1)).play();\n      document.getElementById(\"display\").innerHTML = this.props.id;\n    }\n  }\n  onClick(e) {\n    document.getElementById(this.props.presskey).play();\n    document.getElementById(\"display\").innerHTML = this.props.id;\n  }\n\n  render() {\n    function getColor(){\n      console.log(colors.length+ 'length')\n      console.log(Math.floor(Math.random() * colors.length))\n      return colors[Math.floor(Math.random() * colors.length)]\n    }\n    \n    return (\n      <div>\n        <button\n          className=\"drum-pad btn btn-primary btn-default\"\n          onClick={this.onClick} id={this.props.id} style={{\"background-color\": getColor()}}\n        >\n          {this.props.presskey}\n          <audio\n            src={this.props.audio}\n            id={this.props.presskey}\n            className=\"clip\"\n          ></audio>\n        </button>\n      </div>\n    );\n  }\n}\nconst Display = (props) => <div id=\"display\"></div>;\n\nconst App = () => {\n  return (\n    <div id=\"container\">\n  \n        <div id=\"console\">\n          <div id=\"message\">\n            <Display />\n\n            <div id=\"buttons\">\n              {keys.map((item, index) => (\n                <Drum\n                  key={keys[index]}\n                  presskey={keys[index]}\n                  audio={audio[index]}\n                  id={description[index]}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n\n  );\n};\n\n\n\nexport default App;\nconst backColor = colors[Math.floor(Math.random()*colors.length)]\nconst backColor2=colors[Math.floor(Math.random()*colors.length)]\n$(\"html\").css(\"background-image\", 'linear-gradient(to left top,' + backColor + ', ' + backColor2+ ')');\n$('html').css('background-repeat', 'no-repeat');\n$('html').css('background-size', '100% 100%');\n\n//$('console').css('background-image', 'url(/jukebox.jpg)')","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}